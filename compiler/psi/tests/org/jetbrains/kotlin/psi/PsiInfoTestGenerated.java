/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.psi;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/psi/testData/psiInfo")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class PsiInfoTestGenerated extends AbstractPsiInfoTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInPsiInfo() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/psi/testData/psiInfo"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @TestMetadata("inAnnonymousObject.kt")
    public void testInAnnonymousObject() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inAnnonymousObject.kt");
    }

    @TestMetadata("inClass.kt")
    public void testInClass() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inClass.kt");
    }

    @TestMetadata("inCompanion.kt")
    public void testInCompanion() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inCompanion.kt");
    }

    @TestMetadata("inConstructor.kt")
    public void testInConstructor() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inConstructor.kt");
    }

    @TestMetadata("inEmumEntry.kt")
    public void testInEmumEntry() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inEmumEntry.kt");
    }

    @TestMetadata("InFunction.kt")
    public void testInFunction() throws Exception {
        runTest("compiler/psi/testData/psiInfo/InFunction.kt");
    }

    @TestMetadata("inInitBlock.kt")
    public void testInInitBlock() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inInitBlock.kt");
    }

    @TestMetadata("inLamda.kt")
    public void testInLamda() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inLamda.kt");
    }

    @TestMetadata("inPropertyAcessors.kt")
    public void testInPropertyAcessors() throws Exception {
        runTest("compiler/psi/testData/psiInfo/inPropertyAcessors.kt");
    }

    @TestMetadata("innerClass.kt")
    public void testInnerClass() throws Exception {
        runTest("compiler/psi/testData/psiInfo/innerClass.kt");
    }

    @TestMetadata("propertyAcessors.kt")
    public void testPropertyAcessors() throws Exception {
        runTest("compiler/psi/testData/psiInfo/propertyAcessors.kt");
    }

    @TestMetadata("topLevel.kt")
    public void testTopLevel() throws Exception {
        runTest("compiler/psi/testData/psiInfo/topLevel.kt");
    }

    @TestMetadata("typeParameters.kt")
    public void testTypeParameters() throws Exception {
        runTest("compiler/psi/testData/psiInfo/typeParameters.kt");
    }

    @TestMetadata("valueParams.kt")
    public void testValueParams() throws Exception {
        runTest("compiler/psi/testData/psiInfo/valueParams.kt");
    }

    @TestMetadata("valueParamsAsProperties.kt")
    public void testValueParamsAsProperties() throws Exception {
        runTest("compiler/psi/testData/psiInfo/valueParamsAsProperties.kt");
    }
}
