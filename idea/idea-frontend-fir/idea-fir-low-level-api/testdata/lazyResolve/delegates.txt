FILE: delegates.kt
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [STATUS] fun receive([STATUS] value: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [BODY_RESOLVE] val delegate: <ERROR TYPE REF: Symbol not found for ReadWriteProperty<R|kotlin/Any?|, R|kotlin/Int|>> = object : <ERROR TYPE REF: Symbol not found for ReadWriteProperty<R|kotlin/Any?|, R|kotlin/Int|>> {
        private [BODY_RESOLVE] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override [BODY_RESOLVE] fun getValue([BODY_RESOLVE] thisRef: R|kotlin/Any?|, [BODY_RESOLVE] property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override [BODY_RESOLVE] fun setValue([BODY_RESOLVE] thisRef: R|kotlin/Any?|, [BODY_RESOLVE] property: R|kotlin/reflect/KProperty<*>|, [BODY_RESOLVE] value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        [BODY_RESOLVE] public get(): <ERROR TYPE REF: Symbol not found for ReadWriteProperty<R|kotlin/Any?|, R|kotlin/Int|>>
    public final [STATUS] val valueWithExplicitType: R|kotlin/Int|by LAZY_EXPRESSION
        [STATUS] public get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [BODY_RESOLVE] val valueWithImplicitType: <ERROR TYPE REF: Unresolved name: getValue>by R|/delegate|
        [BODY_RESOLVE] public get(): <ERROR TYPE REF: Unresolved name: getValue> {
            ^ D|/valueWithImplicitType|.<Unresolved name: getValue>#(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [STATUS] var variableWithExplicitType: R|kotlin/Int|by LAZY_EXPRESSION
        [STATUS] public get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        [STATUS] public set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [BODY_RESOLVE] var variableWithImplicitType: <ERROR TYPE REF: Unresolved name: getValue>by R|/delegate|
        [BODY_RESOLVE] public get(): <ERROR TYPE REF: Unresolved name: getValue> {
            ^ D|/variableWithImplicitType|.<Unresolved name: getValue>#(Null(null), ::R|/variableWithImplicitType|)
        }
        [BODY_RESOLVE] public set([BODY_RESOLVE] <set-?>: <ERROR TYPE REF: Unresolved name: getValue>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.<Unresolved name: setValue>#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }
